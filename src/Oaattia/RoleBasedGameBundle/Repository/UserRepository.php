<?php

namespace Oaattia\RoleBasedGameBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Parameter;
use Oaattia\RoleBasedGameBundle\Entity\User;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    /**
     * Loads the user for the given username.
     *
     * This method must return null if the user is not found.
     *
     * @param string $username The username
     *
     * @return UserInterface|null
     */
    public function loadUserByUsername($username)
    {
        $user = $this->findOneByEmail($username);

        if (!$user) {
            throw new UsernameNotFoundException("Username not found");
        }

        return $user;
    }

    /**
     * find other ready users
     *
     * @param $userId
     * @return User
     */
    public function findOtherReadyUsers($userId)
    {
        $query = $this->createQueryBuilder('u');

        $query
            ->select('u')
            ->innerJoin('RoleBasedGameBundle:Character', 'c', 'WITH', 'u.id=c.user')
            ->where('u.id != :id')
            ->andWhere("c.status = 'ready'")
            ->setParameter('id', $userId);

        return $query->getQuery()->getResult();
    }

    /**
     * Find the user by ID and status
     *
     * @param $userId
     * @param $status
     * @return array
     */
    public function findUserByIdAndStatus($userId, $status)
    {
        $query = $this->createQueryBuilder('u');

        $query
            ->select('u')
            ->innerJoin('RoleBasedGameBundle:Character', 'c', 'WITH', 'u.id=c.user')
            ->where('u.id != :id')
            ->andWhere('c.status = :status')
            ->setParameters(['id' => $userId, 'status' => $status]);

        return $query->getQuery()->getSingleResult();
    }


    /**
     * Find by user id the user ready for attack ( status ready or status attacked )
     *
     * @param $userId
     * @return mixed
     */
    public function findUserByIdReadyForFight($userId)
    {
        $query = $this->createQueryBuilder('u');

        $query
            ->select('u')
            ->innerJoin('RoleBasedGameBundle:Character', 'c', 'WITH', 'u.id=c.user')
            ->where('u.id = :id')
            ->andWhere("c.status = 'ready' OR c.status = 'attacked'")
            ->setParameter('id', $userId);

        return $query->getQuery()->getSingleResult();
    }




}
